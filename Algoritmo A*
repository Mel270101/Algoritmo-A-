<?php 
 
// Definimos el grafo que representa el mapa rodoviario de Rumania 
$grafo = [ 
    'Arad' => ['Zerind' => 75, 'Sibiu' => 140, 'Timisoara' => 118], 
    'Zerind' => ['Arad' => 75, 'Oradea' => 71], 
    'Oradea' => ['Zerind' => 71, 'Sibiu' => 151], 
    'Sibiu' => ['Arad' => 140, 'Oradea' => 151, 'Fagaras' => 99, 'Rimnicu Vilcea' => 80], 
    'Timisoara' => ['Arad' => 118, 'Lugoj' => 111], 
    'Lugoj' => ['Timisoara' => 111, 'Mehadia' => 70], 
    'Mehadia' => ['Lugoj' => 70, 'Drobeta' => 75], 
    'Drobeta' => ['Mehadia' => 75, 'Craiova' => 120], 
    'Craiova' => ['Drobeta' => 120, 'Rimnicu Vilcea' => 146, 'Pitesti' => 138], 
    'Rimnicu Vilcea' => ['Sibiu' => 80, 'Craiova' => 146, 'Pitesti' => 97], 
    'Pitesti' => ['Rimnicu Vilcea' => 97, 'Craiova' => 138, 'Bucharest' => 101], 
    'Fagaras' => ['Sibiu' => 99, 'Bucharest' => 211], 
    'Bucharest' => ['Fagaras' => 211, 'Pitesti' => 101, 'Giurgiu' => 90], 
    'Giurgiu' => ['Bucharest' => 90], 
    'Neamt' => ['Iasi' => 87],  
    'Iasi' => ['Neamt' => 87, 'Vaslui' => 92],  
    'Vaslui' => ['Iasi' => 92, 'Urziceni' => 142],  
    'Urziceni' => ['Vaslui' => 142, 'Bucharest' => 85, 'Hirsova' => 98],  
    'Hirsova' => ['Urziceni' => 98, 'Eforie' => 86],  
    'Eforie' => ['Hirsova' => 86] 
];
 
// Definimos la función de costo que calcule la distancia entre dos ciudades 
function costo($grafo, $Arad, $Bucharest) {
    return $grafo[$Arad][$Bucharest]; 
} 
 
// Definimos la función heurística que estime la distancia desde una ciudad hasta 'Bucharest' 
$heuristica = [ 
    'Arad' => 366, 
    'Zerind' => 374, 
    'Oradea' => 380, 
    'Sibiu' => 253, 
    'Timisoara' => 329, 
    'Lugoj' => 244, 
    'Mehadia' => 241, 
    'Drobeta' => 242, 
    'Craiova' => 160, 
    'Rimnicu Vilcea' => 193, 
    'Pitesti' => 98, 
    'Fagaras' => 176, 
    'Bucharest' => 0, 
    'Giurgiu' => 77, 
    'Neamt' => 234, 
    'Iasi' => 226, 
    'Vaslui' => 199, 
    'Urziceni' => 80, 
    'Hirsova' => 151, 
    'Eforie' => 161 
];
 
// Implementamos el algoritmo A* 
function a_estrella($grafo, $costo, $heuristica, $inicio, $fin) { 
    $abierto = []; 
    $cerrado = []; 
    $costo_acumulado = [$inicio => 0]; 
    $camino = [$inicio => null]; 
 
    // Usamos una cola de prioridad para implementar la estructura de datos 'abierto' 
    $abierto = new SplPriorityQueue(); 
    $abierto->insert([0, $inicio], 0); 
 
    while (!$abierto->isEmpty()) { 
        $elemento = $abierto->extract(); 
        $prioridad = $elemento[0]; 
        $ciudad_actual = $elemento[1]; 
 
        if ($ciudad_actual == $fin) { 
            break; 
        } 
 
        $cerrado[$ciudad_actual] = true; 
 
        foreach ($grafo[$ciudad_actual] as $ciudad_siguiente => $distancia) { 
            if (isset($cerrado[$ciudad_siguiente])) { 
                continue; 
            } 
 
            $costo_nuevo = $costo_acumulado[$ciudad_actual] + $distancia; 
            if (!isset($costo_acumulado[$ciudad_siguiente]) || $costo_nuevo < $costo_acumulado[$ciudad_siguiente]) { 
                $costo_acumulado[$ciudad_siguiente] = $costo_nuevo; 
                $prioridad = $costo_nuevo + $heuristica[$ciudad_siguiente]; 
                $abierto->insert([$prioridad, $ciudad_siguiente], -$prioridad); 
                $camino[$ciudad_siguiente] = $ciudad_actual; 
            } 
        } 
    } 
 
    // Reconstruimos el camino óptimo 
    $camino_optimo = []; 
    $ciudad_actual = $fin; 
    while ($ciudad_actual !== null) { 
        $camino_optimo[] = $ciudad_actual; 
        $ciudad_actual = $camino[$ciudad_actual]; 
    } 
    $camino_optimo = array_reverse($camino_optimo); 
 
    echo "La ruta óptima es: " . implode(' -> ', $camino_optimo) . PHP_EOL; 
    echo "El costo total es: " . $costo_acumulado[$fin] . PHP_EOL; 
 
    return $camino_optimo; 
} 
 
// Ejecutamos el algoritmo A* 
$inicio = 'Eforie'; 
$fin = 'Bucharest'; 
$camino_optimo = a_estrella($grafo, 'costo', $heuristica, $inicio, $fin); 
 
?> 
